$checkboxSize: 16px;
$checkboxPadding: 4px;
$checkboxClickableArea: 32px;

.sg-checkbox {
  --checkboxColor: #{$black};
  --checkboxHoverColor: #{$gray-60};
  --checkboxOutlineColor: #{$blue-40};
  --checkboxIconFillColor: #{$white};
  --checkboxLabelColor: #{$text-black};
  --checkboxCheckedColor: #{$black};
  --checkboxInvalidColor: #{$red-60};
  --checkboxInvalidHoverColor: #{$red-50};
  --checkboxInvalidIconFillColor: #{$white};

  @include component();

  display: inline-flex;
  flex-direction: column;

  &--light {
    --checkboxColor: #{$white};
    --checkboxHoverColor: #{$gray-40};
    --checkboxOutlineColor: #{$blue-40};
    --checkboxIconFillColor: #{$black};
    --checkboxLabelColor: #{$text-white};
    --checkboxCheckedColor: #{$white};
    --checkboxInvalidColor: #{$red-40};
    --checkboxInvalidHoverColor: #{$red-50};
    --checkboxInvalidIconFillColor: #{$white};
  }

  &--with-padding {
    padding: $checkboxPadding 0;
  }

  @mixin checkboxCheckedAnimation($fromBackgroundColor, $toBackgroundColor) {
    @keyframes checkboxCheckedFadeOut {
      0% {
        width: $checkboxSize;
        height: $checkboxSize;
        background-color: #{$fromBackgroundColor};
      }

      99% {
        background-color: #{$fromBackgroundColor};
      }

      100% {
        background-color: #{$toBackgroundColor};
        width: calc($checkboxSize / 2);
        height: calc($checkboxSize / 2);
      }
    }
    @keyframes checkboxCheckedFadeIn {
      0% {
        width: calc($checkboxSize / 2);
        height: calc($checkboxSize / 2);
        background-color: #{$toBackgroundColor};
      }

      100% {
        background-color: #{$toBackgroundColor};
        width: $checkboxSize;
        height: $checkboxSize;
      }
    }

    animation-name: checkboxCheckedFadeOut, checkboxCheckedFadeIn;
  }

  @mixin checkboxAnimation($fromBackgroundColor, $toBackgroundColor) {
    @keyframes checkboxFadeOut {
      0% {
        width: $checkboxSize;
        height: $checkboxSize;
        background-color: #{$fromBackgroundColor};
      }

      99% {
        background-color: #{$fromBackgroundColor};
      }

      100% {
        background-color: #{$toBackgroundColor};
        width: calc($checkboxSize / 2);
        height: calc($checkboxSize / 2);
      }
    }
    @keyframes checkboxFadeIn {
      0% {
        width: calc($checkboxSize / 2);
        height: calc($checkboxSize / 2);
        background-color: #{$toBackgroundColor};
      }

      100% {
        width: $checkboxSize;
        height: $checkboxSize;
      }
    }

    animation-name: checkboxFadeOut, checkboxFadeIn;
  }

  @keyframes checkmarkAnimation {
    to {
      stroke-dashoffset: 0%;
    }
  }
  @keyframes checkmarkAnimation2 {
    to {
      stroke-dashoffset: 0%;
    }
  }

  &__content {
    display: flex;
    flex-direction: column;
    margin-left: calc($checkboxClickableArea + $checkboxPadding);
  }

  &__element {
    position: relative;
    width: $checkboxClickableArea;
    height: $checkboxClickableArea;
    display: inline-flex;
    flex-shrink: 0;
    align-items: center;
    justify-content: center;
  }

  &__wrapper {
    display: flex;

    &:hover {
      .sg-checkbox__icon {
        border-color: var(--checkboxHoverColor);
        --checkboxCheckedColor: var(
          --checkboxHoverColor
        ); // override variable to alter animation
      }

      .sg-checkbox__input {
        &:checked,
        &:indeterminate {
          & + .sg-checkbox__icon {
            border-color: var(--checkboxHoverColor);
            background-color: var(--checkboxHoverColor);
            --checkboxCheckedColor: var(
              --checkboxHoverColor
            ); // override variable to alter animation
          }
          &[aria-invalid] + .sg-checkbox__icon {
            background-color: var(--checkboxInvalidHoverColor);
            border-color: var(--checkboxInvalidHoverColor);
            --checkboxCheckedColor: var(
              --checkboxInvalidHoverColor
            ); // override variable to alter animation
          }
        }

        &[aria-invalid] + .sg-checkbox__icon {
          border-color: var(--checkboxInvalidHoverColor);
          --checkboxCheckedColor: var(
            --checkboxInvalidHoverColor
          ); // override variable to alter animation
        }
      }
    }

    .sg-checkbox__input {
      width: 100%;
      height: 100%;
      position: absolute;
      opacity: 0;
      top: 0;
      left: 0;
      z-index: 1;

      &:focus-visible {
        & + .sg-checkbox__icon {
          --checkboxCheckedColor: var(
            --checkboxHoverColor
          ); // override variable to alter animation
          border-color: var(--checkboxHoverColor);
          outline: 2px solid var(--checkboxOutlineColor);
          outline-offset: 2px;

          @media (forced-colors: active) {
            outline-color: Highlight;
          }
        }

        &[aria-invalid] + .sg-checkbox__icon {
          border-color: var(--checkboxInvalidHoverColor);
          --checkboxCheckedColor: var(
            --checkboxInvalidHoverColor
          ); // override variable to alter animation
        }

        &:checked,
        &:indeterminate {
          &[aria-invalid] + .sg-checkbox__icon {
            border-color: var(--checkboxInvalidHoverColor);
            background-color: var(--checkboxInvalidHoverColor);
            --checkboxCheckedColor: var(
              --checkboxInvalidHoverColor
            ); // override variable to alter animation
          }
        }
      }

      &:checked,
      &:indeterminate {
        & + .sg-checkbox__icon {
          border-color: var(--checkboxCheckedColor);
          background-color: var(--checkboxCheckedColor);

          // If component will not animate, draw the checkbox icon without any animation nor transition
          &:not(.sg-checkbox__icon--with-animation):not(.sg-checkbox__icon--animate) {
            svg path {
              stroke-dashoffset: 0;
              stroke: var(--checkboxIconFillColor);
            }
          }

          &--animate {
            @include checkboxCheckedAnimation(
              transparent,
              var(--checkboxCheckedColor)
            );

            svg path {
              transition: stroke-dashoffset 0.4s $easingRegular $durationQuick1;
            }
            svg path {
              stroke-dashoffset: 0;
              stroke: var(--checkboxIconFillColor);
            }

            svg .indeterminate-path {
              transition: stroke-dashoffset 0.6s $easingRegular $durationQuick1;
            }
          }

          svg .indeterminate-path--left {
            transform: rotate(180deg) translateX(20px);
            transform-origin: right;
          }
        }

        &[aria-invalid] + .sg-checkbox__icon {
          border-color: var(--checkboxInvalidColor);
          background-color: var(--checkboxInvalidColor);
          --checkboxCheckedColor: var(
            --checkboxInvalidColor
          ); // override variable to alter animation
        }
      }

      &[aria-invalid] + .sg-checkbox__icon {
        border-color: var(--checkboxInvalidColor);
        fill: var(--checkboxInvalidIconFillColor);
        --checkboxCheckedColor: var(
          --checkboxInvalidColor
        ); // override variable to alter animation
      }
    }
  }

  &__icon {
    width: $checkboxSize;
    height: $checkboxSize;
    border-radius: $borderRadiusSmall;
    border: 2px solid var(--checkboxColor);

    animation-duration: $durationQuick1, $durationModerate1;
    animation-timing-function: $easingExit, $easingEntry;
    animation-delay: $durationInstant, $durationQuick1;
    animation-direction: normal, normal;

    // Add animation only when user is interacting with component
    &--with-animation {
      @include checkboxAnimation(
        var(--checkboxCheckedColor),
        transparent
      ); // checkboxCheckedColor variable gets overriden on different states of the component
    }

    svg {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      margin: auto;
      stroke: var(--checkboxIconFillColor);
      stroke-dasharray: 100%;
      stroke-dashoffset: 100%;
    }
  }

  @media (forced-colors: active) {
    .sg-checkbox__icon {
      fill: FieldText;
    }
  }

  &__label,
  &__description {
    color: var(--checkboxLabelColor);
    padding-right: 16px;
  }

  &__label {
    display: flex;
    padding-top: $checkboxPadding;
    padding-left: $checkboxPadding;

    &--with-padding-bottom {
      padding-bottom: $checkboxPadding;
    }
  }

  &__description,
  .sg-error-message {
    white-space: normal;
  }

  &--disabled {
    opacity: 0.45;
    cursor: not-allowed;
    pointer-events: none;

    @media (forced-colors: active) {
      .sg-checkbox__input + .sg-checkbox__icon {
        border-color: GrayText;
        fill: GrayText;
      }
    }
  }
}

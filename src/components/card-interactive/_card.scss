.sg-card-interactive {
  --card-background-color: var(--white);
  --card-border-color: var(--gray-30);
  --card-border-color-hover: var(--gray-40);
  --card-border-color-invalid: var(--red-60);
  --card-border-color-invalid-hover: var(--red-50);
  --card-border-color-checked: var(--black);
  --card-border-color-checked-hover: var(--gray-60);
  --card-indicator-color: var(--white);

  &[data-color='light'] {
    --card-background-color: var(--black);
    --card-border-color: var(--gray-40);
    --card-border-color-hover: var(--gray-50);
    --card-border-color-invalid: var(--red-40);
    --card-border-color-invalid-hover: var(--red-50);
    --card-border-color-checked: var(--white);
    --card-border-color-checked-hover: var(--white);
    --card-indicator-color: var(--black);
  }

  display: block;
  position: relative;
  width: var(--card-width, auto);
  height: var(--card-height, auto);
  border-radius: 8px;
  overflow: hidden;
  user-select: none;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    border-radius: 8px;
    border: 2px solid;
    pointer-events: none;
    transition: border $durationModerate1 $easingLinear;
  }

  transition: transform $durationModerate2 $easingRegular,
    border $durationModerate1 $easingLinear;

  &[data-variant='outline']::after {
    border-color: var(--card-border-color);
  }

  &[data-variant='solid']::after {
    border-color: transparent;
  }

  &:active:not([data-disabled='true']) {
    transform: scale(0.98);
  }

  &[data-disabled='true'] {
    opacity: 0.45;
  }

  &[data-checked='true'],
  &[data-checked='mixed'] {
    &::after {
      border-color: var(--card-border-color-checked);
    }

    & .sg-checkbox {
      --checkboxColor: var(--card-border-color-checked);
      --checkboxCheckedColor: var(--card-border-color-checked);
    }

    & .sg-radio {
      --radioColor: var(--card-border-color-checked);
    }
  }

  &[data-invalid='true'] {
    &::after {
      border-color: var(--card-border-color-invalid);
    }

    & .sg-checkbox {
      --checkboxColor: var(--card-border-color-invalid);
      --checkboxCheckedColor: var(--card-border-color-invalid);
    }

    & .sg-radio {
      --radioColor: var(--card-border-color-invalid);
      --radioHoverColor: var(--card-border-color-invalid);
    }
  }

  &:hover:not([data-disabled='true']) {
    &::after {
      border-color: var(--card-border-color-hover);
    }

    & .sg-checkbox {
      --checkboxColor: var(--card-border-color-hover);
      --checkboxCheckedColor: var(--card-border-color-hover);
      --checkboxHoverColor: var(--card-border-color-hover);
      transition: all $durationModerate1 $easingRegular;
    }

    & .sg-radio {
      --radioColor: var(--card-border-color-hover);
      --radioHoverColor: var(--card-border-color-hover);
    }

    &[data-checked='true'],
    &[data-checked='mixed'] {
      &::after {
        border-color: var(--card-border-color-checked-hover);
      }

      & .sg-checkbox {
        --checkboxColor: var(--card-border-color-checked-hover);
        --checkboxCheckedColor: var(--card-border-color-checked-hover);
        --checkboxHoverColor: var(--card-border-color-checked-hover);
      }

      & .sg-radio {
        --radioColor: var(--card-border-color-checked-hover);
        --radioHoverColor: var(--card-border-color-checked-hover);
      }
    }

    &[data-invalid='true'] {
      &::after {
        border-color: var(--card-border-color-invalid-hover);
      }

      & .sg-checkbox {
        --checkboxColor: var(--card-border-color-invalid-hover);
        --checkboxCheckedColor: var(--card-border-color-invalid-hover);
        --checkboxHoverColor: var(--card-border-color-invalid-hover);
      }

      & .sg-radio {
        --radioColor: var(--card-border-color-invalid-hover);
        --radioHoverColor: var(--card-border-color-invalid-hover);
      }
    }
  }

  /* Indicators */
  & .sg-checkbox {
    --checkboxColor: var(--card-border-color);
    --checkboxCheckedColor: var(--card-border-color-checked);
    --checkboxIconFillColor: var(--card-indicator-color);
  }

  & .sg-checkbox__icon {
    transition: all $durationModerate1 $easingLinear;
  }

  & .sg-radio {
    --radioColor: var(--card-border-color);
    --radioRingInsideColor: var(--card-indicator-color);
  }

  & .sg-radio__circle {
    transition: all $durationModerate1 $easingLinear;
  }

  /* Focus styles */

  &
    .sg-card-interactive__input:focus-visible
    + .sg-card-interactive__background {
    // TODO(coderitual): Replace with applyFocusStyle when it's updated to support different border widths
    box-shadow: 0px 0px 0px 2px var(--focusInnerColor),
      0px 0px 0px 4px var(--focusColor), 0px 0px 0px 7px var(--focusOuterColor);
    outline: none;
    animation: focusShadow1 $durationQuick2 $easingEntry,
      focusShadow2 $durationQuick2 $easingEntry calc($durationQuick2 / 2),
      focusShadow3 $durationQuick2 $easingEntry $durationQuick2;

    @media (forced-colors: active) {
      outline-color: Highlight;
      outline-width: 2px;
      outline-offset: 6px;
      outline-style: auto;
    }
  }
}

.sg-card-interactive__input {
  position: absolute;
  opacity: 0;
  top: 0;
  left: 0;
}

.sg-card-interactive__background {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  position: absolute;
  inset: 0px;
  background-color: var(--card-background-color);
}

.sg-card-interactive__indicator {
  position: absolute;
  width: 32px;
  height: 32px;

  /*
    The indicator is coming from the real checkbox element so we need to remove its input from the layout
  */
  & input {
    display: none;
  }

  &--top-left {
    top: 0;
    left: 0;
  }
  &--center-left {
    top: 50%;
    left: 0;
    transform: translateY(-50%);
  }
  &--bottom-left {
    bottom: 0;
    left: 0;
  }
  &--top-right {
    top: 0;
    right: 0;
  }
  &--center-right {
    top: 50%;
    right: 0;
    transform: translateY(-50%);
  }
  &--bottom-right {
    bottom: 0;
    right: 0;
  }
}

const path = require('path');
const fs = require('fs-extra');
const prettier = require('prettier');
const colorMap = require('../../src/components/colors/colors');

module.exports = function (gulp, plugins, consts) {
  return function (done) {
    const colorsFileDest = path.resolve(consts.SRC, 'sass', '_colors.scss');
    const cssColorsFileDest = path.resolve(
      consts.SRC,
      'sass',
      '_css-colors.scss'
    );

    const transformToScssMap = function (map) {
      const colors = {};

      /* $black: #000000; */
      Object.keys(map).forEach(groupName => {
        map[groupName].forEach(color => {
          colors[
            `$${color.name.toLocaleLowerCase().replace(/ /g, '-')}`
          ] = `#${color.hex}`;
        });
      });

      return colors;
    };

    const transformToCssMap = function (map) {
      const colors = {};

      /* --black: #{$black}; */
      Object.keys(map).forEach(color => {
        colors[`--${color.substring(1)}`] = `#{${color}}`;
      });

      return colors;
    };

    const mapColors = function (map) {
      const colorsStringsMap = [];

      Object.keys(map).forEach(color => {
        colorsStringsMap.push(`${color}: ${map[color]};`);
      });
      return colorsStringsMap;
    };

    const scssVariables = transformToScssMap(colorMap);
    const cssVariables = transformToCssMap(scssVariables);
    const colorsStringsMap = [
      `/* DO NOT EDIT THIS FILE - it is generated during build process;
* all colors are defined in /src/components/colors/colors.js */`,
    ];

    colorsStringsMap.push(...mapColors(scssVariables));

    const cssColorsStringsMap = [
      `/* DO NOT EDIT THIS FILE - it is generated during build process;
* all colors are defined in /src/components/colors/colors.js */`,
    ];

    cssColorsStringsMap.push(':root {');
    cssColorsStringsMap.push(...mapColors(cssVariables));
    cssColorsStringsMap.push('}');

    const colorsFileContent = colorsStringsMap.join('\n');
    const colorsFormatted = prettier.format(colorsFileContent, {
      parser: 'scss',
    });

    const cssColorsFileContent = cssColorsStringsMap.join('\n');
    const cssColorsFormatted = prettier.format(cssColorsFileContent, {
      parser: 'scss',
    });

    fs.writeFile(colorsFileDest, colorsFormatted);
    fs.writeFile(cssColorsFileDest, cssColorsFormatted);

    done();
  };
};
